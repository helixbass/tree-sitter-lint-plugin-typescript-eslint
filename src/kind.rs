#![allow(dead_code)]

pub type Kind = &'static str;

pub const AbstractMethodSignature: &str = "abstract_method_signature";
pub const AbstractClassDeclaration: &str = "abstract_class_declaration";
pub const AccessibilityModifier: &str = "accessibility_modifier";
pub const AmbientDeclaration: &str = "ambient_declaration";
pub const ArrayType: &str = "array_type";
pub const AsExpression: &str = "as_expression";
pub const Asserts: &str = "asserts";
pub const AssertsAnnotation: &str = "asserts_annotation";
pub const CallSignature: &str = "call_signature";
pub const ConditionalType: &str = "conditional_type";
pub const Constraint: &str = "constraint";
pub const ConstructSignature: &str = "construct_signature";
pub const ConstructorType: &str = "constructor_type";
pub const DefaultType: &str = "default_type";
pub const EnumAssignment: &str = "enum_assignment";
pub const EnumBody: &str = "enum_body";
pub const EnumDeclaration: &str = "enum_declaration";
pub const ExistentialType: &str = "existential_type";
pub const ExtendsClause: &str = "extends_clause";
pub const ExtendsTypeClause: &str = "extends_type_clause";
pub const FunctionSignature: &str = "function_signature";
pub const FunctionType: &str = "function_type";
pub const GenericType: &str = "generic_type";
pub const ImplementsClause: &str = "implements_clause";
pub const ImportAlias: &str = "import_alias";
pub const ImportRequireClause: &str = "import_require_clause";
pub const IndexSignature: &str = "index_signature";
pub const IndexTypeQuery: &str = "index_type_query";
pub const InferType: &str = "infer_type";
pub const InstantiationExpression: &str = "instantiation_expression";
pub const InterfaceDeclaration: &str = "interface_declaration";
pub const InternalModule: &str = "internal_module";
pub const IntersectionType: &str = "intersection_type";
pub const LiteralType: &str = "literal_type";
pub const LookupType: &str = "lookup_type";
pub const MappedTypeClause: &str = "mapped_type_clause";
pub const MethodSignature: &str = "method_signature";
pub const Module: &str = "module";
pub const NestedTypeIdentifier: &str = "nested_type_identifier";
pub const NonNullExpression: &str = "non_null_expression";
pub const ObjectType: &str = "object_type";
pub const OmittingTypeAnnotation: &str = "omitting_type_annotation";
pub const OptingTypeAnnotation: &str = "opting_type_annotation";
pub const OptionalParameter: &str = "optional_parameter";
pub const OptionalTupleParameter: &str = "optional_tuple_parameter";
pub const OptionalType: &str = "optional_type";
pub const OverrideModifier: &str = "override_modifier";
pub const ParenthesizedType: &str = "parenthesized_type";
pub const PredefinedType: &str = "predefined_type";
pub const PropertySignature: &str = "property_signature";
pub const PublicFieldDefinition: &str = "public_field_definition";
pub const ReadonlyType: &str = "readonly_type";
pub const RequiredParameter: &str = "required_parameter";
pub const RestType: &str = "rest_type";
pub const SatisfiesExpression: &str = "satisfies_expression";
pub const TemplateType: &str = "template_type";
pub const TemplateLiteralType: &str = "template_literal_type";
pub const ThisType: &str = "this_type";
pub const TupleParameter: &str = "tuple_parameter";
pub const TupleType: &str = "tuple_type";
pub const TypeAliasDeclaration: &str = "type_alias_declaration";
pub const TypeAnnotation: &str = "type_annotation";
pub const TypeArguments: &str = "type_arguments";
pub const TypeAssertion: &str = "type_assertion";
pub const TypeIdentifier: &str = "type_identifier";
pub const TypeParameter: &str = "type_parameter";
pub const TypeParameters: &str = "type_parameters";
pub const TypePredicate: &str = "type_predicate";
pub const TypePredicateAnnotation: &str = "type_predicate_annotation";
pub const TypeQuery: &str = "type_query";
pub const UnionType: &str = "union_type";
